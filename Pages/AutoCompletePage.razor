@page "/autocomplete"
@using NorthwindBlazor.Data
@using NorthwindBlazor.Models.Northwind
@inject NorthwindContext dbContext

<RadzenExample Name="AutoComplete">
<div class="row">
    <div class="col-md-6">
        <h3>AutoComplete</h3>
        <RadzenAutoComplete Data="@customers" TextProperty="CompanyName"
                            Style="margin-bottom: 20px" Change="@(args => Change(args, "AutoComplete"))" />
        <br />
        <h3>AutoComplete with placeholder</h3>
        <RadzenAutoComplete Placeholder="Select..." Data="@customers" TextProperty="CompanyName" Change="@(args => Change(args, "AutoComplete with placeholder"))" Style="margin-bottom: 20px" />
        <br />
        <h3>AutoComplete with custom filter operator</h3>
        <RadzenAutoComplete Data="@customers" TextProperty="CompanyName" FilterOperator="StringFilterOperator.StartsWith"
                            Style="margin-bottom: 20px" Change="@(args => Change(args, "AutoComplete with custom filter operator"))" />
        <br />
        <h3>AutoComplete with custom filtering</h3>
        <RadzenAutoComplete Data="@customCustomersData" TextProperty="CompanyName"
                            LoadData="@LoadData"
                            Style="margin-bottom: 20px" Change="@(args => Change(args, "AutoComplete with custom filtering"))" />
        <br />
        <h3>Disabled AutoComplete</h3>
        <RadzenAutoComplete Disabled="true" Data="@customers" TextProperty="CompanyName" Change="@(args => Change(args, "AutoComplete with placeholder"))" Style="margin-bottom: 20px" />
        <br />
    </div>
    <div class="col-md-6">
        <h3>Events</h3>
        <RadzenCard style="overflow: auto;height:500px;">
            @foreach (var e in events.OrderByDescending(i => i.Key))
            {
                @e.Value
                <br />
            }
        </RadzenCard>
    </div>
</div>
</RadzenExample>

@code {
    IEnumerable<Customer> customers;
    IEnumerable<Customer> customCustomersData;

    protected override void OnInitialized()
    {
        customers = dbContext.Customers.ToList();
    }

    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    void Change(object value, string name)
    {
        events.Add(DateTime.Now, $"{name} value changed to {value}");
        StateHasChanged();
    }

    void LoadData(LoadDataArgs args)
    {
        customCustomersData = dbContext.Customers.Where(c=> c.CustomerID.Contains(args.Filter) || c.ContactName.Contains(args.Filter)).ToList();

        InvokeAsync(StateHasChanged);
    }
}
