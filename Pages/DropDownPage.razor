@page "/dropdown"

@using NorthwindBlazor.Data
@using NorthwindBlazor.Models.Northwind

@inject NorthwindContext dbContext

<RadzenExample Name="DropDown">
<div class="row">
    <div class="col-md-6">
        <h3>DropDown</h3>
        <RadzenDropDown AllowClear="true" TValue="string"
                        Data="@(customers.Select(c => new { CustomerID = c.CustomerID, CompanyName = c.CompanyName }).Distinct())"
                        TextProperty="CompanyName" ValueProperty="CustomerID" Style="margin-bottom: 20px" Change="@(args => Change(args, "DropDown"))" />
        <br />
        <h3>DropDown with custom filter operator</h3>
        <RadzenDropDown AllowClear="true" TValue="string"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"
                        Data="@customers" TextProperty="CompanyName" ValueProperty="CustomerID" Style="margin-bottom: 20px" Change="@(args => Change(args, "DropDown with custom filter operator"))" />
        <br />
        <h3>DropDown with custom filtering</h3>
        <RadzenDropDown AllowClear="true" TValue="string"
                        LoadData="@LoadData" AllowFiltering="true"
                        Data="@customCustomersData" TextProperty="CompanyName" ValueProperty="CustomerID" Style="margin-bottom: 20px"
                        Change="@(args => Change(args, "DropDown with custom filtering"))" />
        <br />
        <h3>DropDown with placeholder</h3>
        <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Placeholder="Select..." Data="@customers" TextProperty="CompanyName" ValueProperty="CustomerID" Change="@(args => Change(args, "DropDown with placeholder"))" Style="margin-bottom: 20px" />
        <br />
        <h3>DropDown with template</h3>
        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="value" Placeholder="Select..." Data="@customers" TextProperty="CompanyName" ValueProperty="CustomerID"
                        Change="@(args => Change(args, "DropDown with placeholder"))" Style="margin-bottom: 20px; width:400px;">
            <Template>
                Company: @((context as Customer).CompanyName)
            </Template>
        </RadzenDropDown>
        <br />
        <h3>DropDown with multiple selection</h3>
        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="multipleValues" Multiple="true" Placeholder="Select..." Data="@customers" TextProperty="CompanyName" ValueProperty="CustomerID"
                        Change="@(args => Change(args, "DropDown with multiple selection"))" Style="margin-bottom: 20px; width:400px;" />
        <br />
        <h3>Bind DropDown Value to model property</h3>
        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" Data="@products" @bind-Value="myModel.MyValue"
                        TextProperty="ProductName" ValueProperty="ProductID" Style="margin-bottom: 20px; width:400px;" Change="@(args => ChangeBound(args, "DropDown with bound Value"))" />
        <br />
    </div>
    <div class="col-md-6">
        <h3>Events</h3>
        <RadzenCard style="overflow: auto;height:500px;">
            @foreach (var e in events.OrderByDescending(i => i.Key))
            {
                @e.Value
                <br />
            }
        </RadzenCard>
    </div>
</div>
</RadzenExample>

@code {
    IEnumerable<Customer> customers;
    IEnumerable<Customer> customCustomersData;
    IEnumerable<Product> products;
    MyObject myModel = new MyObject();

    protected override void OnInitialized()
    {
        customers = dbContext.Customers.ToList();
        products = dbContext.Products.ToList();
    }

    IEnumerable<string> multipleValues = new string[] { "ALFKI", "ANATR" };
    string value = "ALFKI";

    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    void Change(object value, string name)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

        events.Add(DateTime.Now, $"{name} value changed to {str}");
        StateHasChanged();
    }

    void ChangeBound(object value, string name)
    {
        events.Add(DateTime.Now, $"{name} value changed to {myModel.MyValue}");
        StateHasChanged();
    }

    class MyObject
    {
        public int? MyValue { get; set; } = 3;
    }

    void LoadData(LoadDataArgs args)
    {
        var query = dbContext.Customers.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(c => c.CustomerID.ToLower().Contains(args.Filter.ToLower()) || c.ContactName.ToLower().Contains(args.Filter.ToLower()));
        }

        customCustomersData = query.ToList();

        InvokeAsync(StateHasChanged);
    }
}
